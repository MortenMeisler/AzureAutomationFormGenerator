@*@model Dictionary<string, AzureAutomationFormGenerator.WebUI.Models.ParameterDefinitions.IRunbookParameterDefinition>*@
@model IRunbookGenerated

@{
    ViewData["Title"] = "AzureRunbookFormView";
}


@if (@Model.DisplayName != null)
{
    <h3 class="about-heading runbook-name">@Model.DisplayName</h3>
}else{
    <h3 class="about-heading runbook-name">@Model.Name</h3>
}

<hr>
<table id="status-table" class="table" style="display: none">
    <thead>
        <tr>
            <th scope="col">Status:</th>
            <th scope="col" id="jobstatus"></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td id="spinner"></td>
            <td><p class="text-success" id="jobmessage"></p></td>
        </tr>
    </tbody>
</table>
<div id="automation-form">
    @if (Model != null)
    {

    <form asp-controller="Home" class="needs-validation" novalidate asp-action="Submit" method="post">
        @{int inputCount = 0;}

        @* class="animated bounceOutUp infinite" *@
        @foreach (var item in Model.ParameterDefinitions)
        {
            //Index value
            <input type="text" name="inputs[@inputCount].Key" hidden value="@item.Key" />
            <div class="form-group needs-validation has-danger" novalidate>

                @*************************************************************************
                * LABEL - label name for each parameter
                *************************************************************************@
                <label class="form-control-label" for="@(item.Key)">
                    @if (item.Value.DisplayName != null)
                    {@item.Value.DisplayName}
                else
                {@item.Key}
                </label>

                @*************************************************************************
                 * SELECTION VALUES - Create dropdown box field type if selectionvalues present
                *************************************************************************@
                @if (item.Value.SelectionValues != null)
                {

                    <select class="form-control" id="@(item.Key)" name="inputs[@inputCount].Value" value="@item.Value.DefaultValue">
                        @foreach (var validateItem in item.Value.SelectionValues)
                        {
                            if (item.Value.DefaultValue != null && item.Value.DefaultValue.Equals(validateItem, StringComparison.OrdinalIgnoreCase))
                            {
                                <option selected>@validateItem</option>
                            }
                            else
                            {
                                @item.Value.DefaultValue
                                <option>@validateItem</option>
                            }

                        }
                    </select>
                }
                @*************************************************************************
                * ARRAY - Create array field type if parameter type is array
                *************************************************************************@
                else if (item.Value.ParameterType == Constants.ParameterTypes.array)
                {
                    <div id="formarray_@(item.Key)" class="array-form">
                        <table id="itemTable_@(item.Key)" class="array-table">
                            <tr>
                                <td>
                                    <input type="text" id="itemInput_@(item.Key)" name="placeholder123" class="form-control form-control-danger" placeholder="" />
                                </td>
                                <td style="text-align: right; width: 15px">
                                    <button type="submit" value="@(item.Key)" class="btn btn-primary itemAdd" id="itemAdd_@inputCount">
                                        <span class="fa fa-plus"></span> Add
                                    </button>
                                </td>
                            </tr>
                        </table>

                        <p class="empty-list" id="@(item.Key)">The list is empty</p>
                        <p class="non-empty-list"></p>
                        <input type="text" name="inputs[@inputCount].Value" id="@item.Key" hidden />
                    </div>

                    <style>
                        .validation-summary-errors ul {
                            list-style-type: none;
                            color: red;
                            padding: 0;
                            margin: 0;
                        }

                        .empty-list {
                            color: lightgray;
                        }

                        .non-empty-list {
                            list-style-type: none;
                        }
                    </style>

                }
                @*************************************************************************
                * DATETIME - Create datetime field type
                *************************************************************************@
                else if (item.Value.ParameterType == Constants.ParameterTypes.datetime)
                {

                    <div class="input-group date needs-validation has-danger" id="datetime_@item.Key" data-target-input="nearest">
                        <input type="text" class="form-control form-control-danger datetimepicker-input" id="@item.Key" name="inputs[@inputCount].Value" value="@item.Value.DefaultValue" data-target="#datetime_@item.Key" />
                        <div class="input-group-append" data-target="#datetime_@item.Key" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                    </div>


                }

                @*************************************************************************
                * STRING - Create string field type by default
                *************************************************************************@
                else
                {


                    <input type="text" name="inputs[@inputCount].Value" class="form-control form-control-danger" id="@item.Key" value="@item.Value.DefaultValue" />

                }

            </div>

            inputCount++;
        }
        <input type="text" id="signalRconnectionId" name="signalRconnectionId" hidden value="" />
        <input type="hidden" id="runbookName" name="runbookName" value="@Model.Name" />
        <input type="hidden" id="runbookDisplayName" name="runbookDisplayName" value="@Model.DisplayName" />
        <input type="hidden" id="runbookHybridWorkerGroup" name="runbookHybridWorkerGroup" value="@Model.HybridWorkerGroup" />
        <table>
            <tr>

                <td><input id="submitButton" class="btn btn-primary" data-loading-text="<i class='fa fa-spinner fa-spin fa-fw' aria-hidden='true'>" type="submit" value="Submit" /></td>


            </tr>
        </table>

    </form>
    }
    <br />

    <p id="errormessage" class="alert-danger"></p>
</div>



<script>
    var myModel = @Html.Raw(Json.Serialize(Model));
</script>
<script src="~/lib/signalr/signalr.js"></script>
<script src="~/js/signal.js" defer></script>
@*<script src="~/js/site.js" defer></script>*@


